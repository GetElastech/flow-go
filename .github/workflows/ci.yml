name: CI

on:
  push:
    branches:
      - 'auto-cadence-upgrade/**'
      - staging
      - trying
      - 'feature/**'
      - 'v[0-9]+.[0-9]+'
  pull_request:
    branches:
      - master
      - 'auto-cadence-upgrade/**'
      - 'feature/**'
      - 'v[0-9]+.[0-9]+'

env:
  GO_VERSION: 1.17

jobs:
  golangci:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Build relic
      run: make crypto_setup_gopath
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v2
      with:
        # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
        version: v1.45
        args: -v --build-tags relic
        # https://github.com/golangci/golangci-lint-action/issues/244
        skip-pkg-cache: true
        # Make sure we get accurate results
        # Some of these may be needed if observer code is integrated: only-new-issues: true, skip-build-cache: true
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@master
      with:
        scandir: './crypto'
        ignore: 'relic'
  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Run tests
      if: github.actor != 'bors[bot]'
      run: make ci
    - name: Run tests (Bors)
      if: github.actor == 'bors[bot]'
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 25
        max_attempts: 3
        command: make ci
    - name: Upload coverage report
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella

  integration-test:
    name: Integration Tests
    strategy:
      fail-fast: false
      matrix:
        test-category:
          - integration-mvp
          - integration-ghost
          - integration-network
          - integration-epochs
          - integration-access
          - integration-collection
          - integration-consensus
          - integration-execution
          - integration-verification
    env:
      TEST_CATEGORY: ${{ matrix.test-category }}
    runs-on: ubuntu-latest
    steps:
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Build relic
      run: make crypto_setup_gopath
    - name: Docker build
      run: make docker-build-flow
    - name: Run tests
      if: github.actor != 'bors[bot]'
      run: ./tools/test_monitor/run-tests.sh
    - name: Run tests (Bors)
      if: github.actor == 'bors[bot]'
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 15
        max_attempts: 2
        command: ./tools/test_monitor/run-tests.sh
  flow-legacy-client-compatibility-test:
    name: Client Compatibility Tests With Observer
    strategy:
      fail-fast: false
      matrix:
        go-version:
          - 1.16
          - 1.17
    runs-on: ubuntu-latest
    steps:
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version}}
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Build relic
      run: make crypto_setup_gopath
    - name: Docker build
      run: make install-tools
    - name: Install Flow Client
      run: sh -ci "$(curl -fsSL https://storage.googleapis.com/flow-cli/install.sh)"
    - name: Set up Localnet
      run: bash -c 'cd integration/localnet/ && make -e OBSERVER=1 init && make start'
    - name: Ensure Observer is started
      run: docker ps -q -f name=localnet_observer_1_1
    - name: Get Version ensuring the official client build can connect
      run: ~/.local/bin/flow -f integration/localnet/flow-localnet.json -n observer version
    - name: Get Status ensuring the official client build can connect
      run: ~/.local/bin/flow -f integration/localnet/flow-localnet.json -n observer status
    - name: Wait for finalized blocks and check them with Observer
      # || true = non-breaking due to rpc change. We do access and observer together to fetch the same block
      run: ~/.local/bin/flow -f integration/localnet/flow-localnet.json -n access blocks get latest && (~/.local/bin/flow -f integration/localnet/flow-localnet.json -n observer blocks get latest || true)
    - name: Stop localnet
      run: bash -c 'cd integration/localnet/ && make stop'
